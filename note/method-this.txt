# 메서드 만들기

let user = {
    name: "John",
    age: 30,
};

# 첫번째 방법
user.sayHi = function() {
    console.log("Hello!");
};

user.sayHi(); // Hello!

# 두번째 방법

function sayHi() {
    console.log("Hello!");
}

user.sayHi = sayHi;
user.sayHi(); // Hello!



# 메서드 단축 구문
// 두 객체는 동일하게 동작
user = {
    sayHi: function() {
        console.log("Hello!");
    }
};

user = {
    sayHi() {
        console.log("Hello!);
    }
}



# 메서드와 this
let user = {
    name: "John",
    age: 30,

    sayHi() {
        // 'this'는 현재 객체를 나타낸다
        console.log(this.name);
    }
};

user.sayHi(); // John


# 엉뚱한 객체 참고
let user = {
    name: "John",
    age: 30,

    sayHi() {
        console.log(user.name); // Error: Cannot read property...
    }
};

let admin = user;
user = null;

admin.sayHi(); // 엉뚱한 객체 참고하면서 에러 발생... => this를 사용해 해결!


# this가 없는 화살표 함수
let user = {
    firstName: "Bora",
    sayHi() {
        let arrow = () => console.log(this.firstName);
        arrow();
    }
};

user.sayHi();

# 문제 풀어보기

# 1) 객체 리터럴에서 this 사용하기 - 이 객체의 ref에 접근 시 결과는?
function makeUser() {
    return {
        name: "John",
        ref: this,
    };
};

let user = makeUser();
console.log( user.ref.name ); //  ref가 함수 전체를 가리키게되면서 에러 발생

ref() {
    return this; 
}

위와 같이 수정하여 에러 해결!


# 2) 계산기 만들기
let calculator = {
    a : 0,
    b : 0,

    read() {
        this.a = +prompt("first value");
        this.b = +prompt("second value");
        return;
    },

    sum() {
        console.log(this.a + this.b);
        return;
    },

    mul() {
        console.log(this.a * this.b);
        return;
    },
};

# 3) 체이닝

let ladder = {
  step: 0,
  up() {
    this.step++;
  },
  down() {
    this.step--;
  },
  showStep: function() { // 사다리에서 몇 번째 단에 올라와 있는지 보여줌
    alert( this.step );
  }
};

ladder.up();
ladder.up();
ladder.down();
ladder.showStep(); // 1

// 위의 코드를 아래와 같이 수정하여 체이닝 가능하도록 함.

let ladder = {
  step: 0,
  up() {
    this.step++;
    return this;
  },
  down() {
    this.step--;
    return this;
  },
  showStep: function() { // 사다리에서 몇 번째 단에 올라와 있는지 보여줌
    alert( this.step );
    return this;
  }
};

ladder.up().up().down().up().down().showStep(); // 1


