# 1. <script>

    ∙ <script> 태그는 src 속성과 내부 코드를 동시에 가지지 못한다.
      따라서 외부 파일을 연결할지 아니면 태그 내 코드를 작성할지 선택해야한다.
    
      <script src="file.js"></script>
      <script>
        alert(1);
      </script>

# 2. Variable
    ∙ 변수는 한 번만 선언한다. 같은 변수를 여러 번 선언하면 에러 발생.
    ∙ let: Mutable variable

      let message;
      message = "Hello";
      message = "World";
      console.log(message); // World

    ∙ const:  Immutable variable
      
# 3. Operator

    ∙ console.log( 5 % 2 ); // 1, 5를 2로 나눈 후의 나머지인 1 출력
      console.log( 2 ** 2 ); // 4, 2의 2승

      # 숫자와 문자열을 "+" 연산자로 연결하면 결과는 문자열이다.
      console.log( '1' + 2 ); // "12"
      console.log( 2 + 2 + '1' ) // "41"


# 4. Type conversion

    ∙ Conversion to string
      let value = true;
      console.log(typeof value); // boolean

      value = String(value);
      alert(typeof value); // string
    
    ∙ Conversion to number
      console.log("6" / "2"); // 3, 문자열이 숫자열로 자동변환 후 연산 수행
      
      let str = "123"
      alert(typeof str); // string

      let num = Number(str);
      alert(typeof num); // number
    
    ∙ let age = Number("임의의 문자열 123");
      alert(age); // NaN, 형 변환 실패

      # true => 1, false => 0, undefined => NaN, null => 0

    ∙ Conversion to boolean
      console.log( Boolean(1) ); // true
      console.log( Boolean(0) ); // false
      console.log( Boolean("Hello") ); // true
      console.log( Boolean("") ); // false
      console.log( Boolean("0") ); // true
      console.log( Boolean(" ") ); // true

# 5 Question mark conditional
    ∙ let accessAllowed;
      let age = propmt('나이를 입력해주세요.', '');

      if (age > 18) {
          accessAllowed = true;
      } else {
          accessAllowed = false;
      }
      alert(accessAllowed);

      => let accessAllowed = (age > 18) ? true : false;

# 6 Nullish coalescing operator
    ∙ 할당된 값을 찾는 연산자.
    ∙ a ?? b: a가 null도 아니고 undefined도 아니면 a, 그 외의 경우는 b
    ∙ let height = 0;
      console.log(height || 100); // 100, height = falsy
      console.log(height ?? 100); // 0, height is defined


# 7 Function
    ∙ 로컬 변수: 함수안에서 생성된 변수는 그 함수 안에서만 사용 가능
      function showMessage() {
        let mssage = "Hello";
        console.log( message );
      }
      showMessage(); // Hello
      console.log( message ); // ReferenceError...

    ∙ 전역 변수: 위치 상관없이 사용 가능
      let user = "seung";
      function showMessage() {
          let message = "Hello, " + user;
          console.log( message );
      }
      showMessage(); // Hello, seung

    ∙ Function Declaration
      function sayHi() {
          alert("Hello);
      }
      let sayHi = function() {
          alert("Hello")
      };
      
      # We can copy function like this...
      function sayHi() {
          console.log("Hello");
      }

      let func = sayHi;

      func(); // Hello
      sayHi(); // Hello

    ∙ Callback function: 함수의 매개변수로 사용되는 함수
      function ask(question, yes, no) {
          if (confirm(question)) yes()
          else no();
      }

      function showOk() {
          console.log("동의");
      }

      function showCancel() {
          console.log("취소");
      }

      ask("동의?", showOk, showCancel);

    ∙ 함수 선언문 vs 함수 표현식
        
        # 함수 선언문
        sayHi("World");
        function sayHi(name) {
            console.log(`Hello, ${name}`);
        } // Hello, World

        # 함수 표현식
        sayHi("World");
        let sayHi = function(name) {
            console.log(`Hello, ${name}`);
        }; // sayHi is not defined...

    ∙ Arrow function

        let func = (arg1, arg2, ...argN) => expression

        let sum = (a, b) => {
            let result = a + b;
            return result;
        };

        console.log(sum(1, 2)); // 3


    




    


